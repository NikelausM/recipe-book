{"ast":null,"code":"import { HttpParams } from \"@angular/common/http\";\nimport { BehaviorSubject, throwError } from \"rxjs\";\nimport { catchError, tap } from \"rxjs/operators\";\nimport { environment } from \"src/environments/environment\"; // swapped by angular cli in production build\n\nimport { User } from \"./user.model\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/router\";\nexport class AuthService {\n  constructor(http, router) {\n    this.http = http;\n    this.router = router;\n    this.user = new BehaviorSubject(null);\n  }\n\n  static authUrl(urlType) {\n    const params = new HttpParams({\n      fromObject: {\n        'key': this.WEB_API_KEY\n      }\n    });\n    const url = `${this.AUTH_BASE_URL}${urlType}?${params.toString()}`;\n    return url;\n  }\n\n  signUp(email, password) {\n    return this.http.post(AuthService.authUrl('signUp'), {\n      email: email,\n      password: password,\n      returnSecureToken: true\n    }).pipe(catchError(this.handleError), tap(resData => {\n      this.handleAuthentication(resData.email, resData.localId, resData.idToken, Number(resData.expiresIn));\n    }));\n  }\n\n  login(email, password) {\n    return this.http.post(AuthService.authUrl('signInWithPassword'), {\n      email: email,\n      password: password,\n      returnSecureToken: true\n    }).pipe(catchError(this.handleError), tap(resData => {\n      this.handleAuthentication(resData.email, resData.localId, resData.idToken, Number(resData.expiresIn));\n    }));\n  }\n\n  autoLogin() {\n    const userData = JSON.parse(localStorage.getItem(AuthService.USER_DATA_KEY));\n\n    if (!userData) {\n      return;\n    }\n\n    const expirationDate = new Date(userData._tokenExpirationDate);\n    const loadedUser = new User(userData.email, userData.id, userData._token, expirationDate);\n\n    if (loadedUser.token) {\n      this.user.next(loadedUser);\n      const expirationDuration = expirationDate.getTime() - new Date().getTime();\n      this.autoLogout(expirationDuration);\n    }\n  }\n\n  logout() {\n    console.log(\"Logging out...\");\n    this.user.next(null);\n    localStorage.removeItem(AuthService.USER_DATA_KEY);\n\n    if (this.tokenExpirationTimer) {\n      clearTimeout(this.tokenExpirationTimer);\n    }\n\n    this.tokenExpirationTimer = null;\n    this.router.navigate(['/auth']);\n  }\n\n  autoLogout(expirationDuration) {\n    this.tokenExpirationTimer = setTimeout(() => {\n      this.logout();\n    }, expirationDuration);\n  }\n\n  handleError(errorRes) {\n    let errorMessage = 'An unknown error occurred';\n\n    if (!errorRes.error || !errorRes.error.error) {\n      return throwError(errorMessage);\n    }\n\n    switch (errorRes.error.error.message) {\n      case 'EMAIL_EXISTS':\n        errorMessage = 'This email exists already';\n        break;\n\n      case 'EMAIL_NOT_FOUND':\n        errorMessage = 'This email does not exist';\n        break;\n\n      case 'INVALID_PASSWORD':\n        errorMessage = 'This password is not correct.';\n        break;\n\n      default:\n        break;\n    }\n\n    return throwError(errorMessage);\n  }\n\n  handleAuthentication(email, userId, token, expiresIn) {\n    const expirationDate = new Date(new Date().getTime() + expiresIn * 1000);\n    const user = new User(email, userId, token, expirationDate);\n    this.user.next(user);\n    this.autoLogout(expiresIn * 1000);\n    localStorage.setItem(AuthService.USER_DATA_KEY, JSON.stringify(user));\n  }\n\n}\nAuthService.AUTH_BASE_URL = environment.firebaseAuthBaseURL;\nAuthService.WEB_API_KEY = environment.firebaseAPIKey;\nAuthService.USER_DATA_KEY = 'userData';\n\nAuthService.ɵfac = function AuthService_Factory(t) {\n  return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.Router));\n};\n\nAuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthService,\n  factory: AuthService.ɵfac,\n  providedIn: 'root'\n});","map":null,"metadata":{},"sourceType":"module"}