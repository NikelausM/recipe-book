{"ast":null,"code":"import _classCallCheck from \"/Users/nicmora/Documents/Training/Angular/angular-project/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/nicmora/Documents/Training/Angular/angular-project/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport { HttpClient, HttpParams } from \"@angular/common/http\";\nimport { Router } from \"@angular/router\";\nimport { BehaviorSubject, throwError } from \"rxjs\";\nimport { catchError, tap } from \"rxjs/operators\";\nimport { environment } from \"src/environments/environment\"; // swapped by angular cli in production build\n\nimport { User } from \"./user.model\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/router\";\nexport var AuthService = /*#__PURE__*/function () {\n  function AuthService(http, router) {\n    _classCallCheck(this, AuthService);\n\n    this.http = http;\n    this.router = router;\n    this.user = new BehaviorSubject(null);\n  }\n\n  _createClass(AuthService, [{\n    key: \"signUp\",\n    value: function signUp(email, password) {\n      var _this = this;\n\n      return this.http.post(AuthService.authUrl('signUp'), {\n        email: email,\n        password: password,\n        returnSecureToken: true\n      }).pipe(catchError(this.handleError), tap(function (resData) {\n        _this.handleAuthentication(resData.email, resData.localId, resData.idToken, Number(resData.expiresIn));\n      }));\n    }\n  }, {\n    key: \"login\",\n    value: function login(email, password) {\n      var _this2 = this;\n\n      return this.http.post(AuthService.authUrl('signInWithPassword'), {\n        email: email,\n        password: password,\n        returnSecureToken: true\n      }).pipe(catchError(this.handleError), tap(function (resData) {\n        _this2.handleAuthentication(resData.email, resData.localId, resData.idToken, Number(resData.expiresIn));\n      }));\n    }\n  }, {\n    key: \"autoLogin\",\n    value: function autoLogin() {\n      var userData = JSON.parse(localStorage.getItem(AuthService.USER_DATA_KEY));\n\n      if (!userData) {\n        return;\n      }\n\n      var expirationDate = new Date(userData._tokenExpirationDate);\n      var loadedUser = new User(userData.email, userData.id, userData._token, expirationDate);\n\n      if (loadedUser.token) {\n        this.user.next(loadedUser);\n        var expirationDuration = expirationDate.getTime() - new Date().getTime();\n        this.autoLogout(expirationDuration);\n      }\n    }\n  }, {\n    key: \"logout\",\n    value: function logout() {\n      console.log(\"Logging out...\");\n      this.user.next(null);\n      localStorage.removeItem(AuthService.USER_DATA_KEY);\n\n      if (this.tokenExpirationTimer) {\n        clearTimeout(this.tokenExpirationTimer);\n      }\n\n      this.tokenExpirationTimer = null;\n      this.router.navigate(['/auth']);\n    }\n  }, {\n    key: \"autoLogout\",\n    value: function autoLogout(expirationDuration) {\n      var _this3 = this;\n\n      this.tokenExpirationTimer = setTimeout(function () {\n        _this3.logout();\n      }, expirationDuration);\n    }\n  }, {\n    key: \"handleError\",\n    value: function handleError(errorRes) {\n      var errorMessage = 'An unknown error occurred';\n\n      if (!errorRes.error || !errorRes.error.error) {\n        return throwError(errorMessage);\n      }\n\n      switch (errorRes.error.error.message) {\n        case 'EMAIL_EXISTS':\n          errorMessage = 'This email exists already';\n          break;\n\n        case 'EMAIL_NOT_FOUND':\n          errorMessage = 'This email does not exist';\n          break;\n\n        case 'INVALID_PASSWORD':\n          errorMessage = 'This password is not correct.';\n          break;\n\n        default:\n          break;\n      }\n\n      return throwError(errorMessage);\n    }\n  }, {\n    key: \"handleAuthentication\",\n    value: function handleAuthentication(email, userId, token, expiresIn) {\n      var expirationDate = new Date(new Date().getTime() + expiresIn * 1000);\n      var user = new User(email, userId, token, expirationDate);\n      this.user.next(user);\n      this.autoLogout(expiresIn * 1000);\n      localStorage.setItem(AuthService.USER_DATA_KEY, JSON.stringify(user));\n    }\n  }], [{\n    key: \"authUrl\",\n    value: function authUrl(urlType) {\n      var params = new HttpParams({\n        fromObject: {\n          'key': this.WEB_API_KEY\n        }\n      });\n      var url = \"\".concat(this.AUTH_BASE_URL).concat(urlType, \"?\").concat(params.toString());\n      return url;\n    }\n  }]);\n\n  return AuthService;\n}();\nAuthService.AUTH_BASE_URL = environment.firebaseAuthBaseURL;\nAuthService.WEB_API_KEY = environment.firebaseAPIKey;\nAuthService.USER_DATA_KEY = 'userData';\n\nAuthService.ɵfac = function AuthService_Factory(t) {\n  return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.Router));\n};\n\nAuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthService,\n  factory: AuthService.ɵfac,\n  providedIn: 'root'\n});","map":null,"metadata":{},"sourceType":"module"}